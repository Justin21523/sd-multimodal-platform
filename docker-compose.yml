# ===================================
# SD Multi-Modal Platform Docker Compose
# ===================================

version: '3.8'

services:
  # Main FastAPI application
  api:
    build:
      context: .
      dockerfile: Dockerfile
      target: development
    container_name: sd-multimodal-api
    ports:
      - "8000:8000"
    environment:
      # API Configuration
      - API_PREFIX=/api/v1
      - HOST=0.0.0.0
      - PORT=8000
      - ALLOWED_ORIGINS=http://localhost:3000,http://localhost:8080

      # Hardware Configuration
      - DEVICE=cuda
      - TORCH_DTYPE=float16
      - ENABLE_XFORMERS=true
      - USE_ATTENTION_SLICING=true

      # Logging
      - LOG_LEVEL=INFO
      - ENABLE_REQUEST_LOGGING=true

      # Performance
      - MAX_WORKERS=1
      - MAX_BATCH_SIZE=1

      # Development settings
      - PYTHONPATH=/app
      - PYTHONUNBUFFERED=1

    volumes:
      # Code for development hot reload
      - .:/app
      - ./models:/app/models
      - ./outputs:/app/outputs
      - ./assets:/app/assets
      - ./logs:/app/logs

      # Prevent overwriting node_modules if present
      - /app/node_modules

    # GPU access for CUDA
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]

    # Wait for any dependencies
    depends_on:
      - redis

    # Health check
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/api/v1/health/simple"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

    # Restart policy
    restart: unless-stopped

    # Networks
    networks:
      - sd-network

  # Redis for future queue management
  redis:
    image: redis:7-alpine
    container_name: sd-multimodal-redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    command: redis-server --appendonly yes
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 5s
      retries: 3
    restart: unless-stopped
    networks:
      - sd-network

  # Nginx reverse proxy for production
  nginx:
    image: nginx:alpine
    container_name: sd-multimodal-nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./outputs:/usr/share/nginx/html/outputs:ro
      - ./assets:/usr/share/nginx/html/assets:ro
    depends_on:
      - api
    restart: unless-stopped
    networks:
      - sd-network
    profiles:
      - production

  # Prometheus for monitoring (optional)
  prometheus:
    image: prom/prometheus:latest
    container_name: sd-multimodal-prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--web.enable-lifecycle'
    restart: unless-stopped
    networks:
      - sd-network
    profiles:
      - monitoring

  # Grafana for dashboards (optional)
  grafana:
    image: grafana/grafana:latest
    container_name: sd-multimodal-grafana
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=admin
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    restart: unless-stopped
    networks:
      - sd-network
    profiles:
      - monitoring

# Named volumes for persistent data
volumes:
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local

# Networks
networks:
  sd-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Development override
# Use: docker-compose -f docker-compose.yml -f docker-compose.override.yml up